logging: {
    debug_log: {
        enable: true,
        log_dir: '$PROJECT_DIR/log',
        filename_base: '$EXE_NAME_',
        # filemode='w' == wipe out the prev log on each run
        filemode: 'w',
        # NOTE: load the following regex into PyCharm:
        # ^([\d-]+ [\d-:,.]+)\s+([\w.]+)\s*([\w]+)\s*(.*)$
        # Capture groups: datetime=1 severity=3 category=2
        format: '%(asctime)s.%(msecs)03d %(name)48s %(levelname)-8s %(message)s',
        datetime_format: '%Y-%m-%d %H:%M:%S'
    },
    console: {
        enable: true
        format: '%(asctime)s %(name)48s %(levelname)-8s %(message)s',
        datetime_format: '%H:%M:%S.%03d'
    },
    loglevel_info: [
        'backend.sqlite.base_db',
#         'backend.executor.central',
        'app_config',
        'ui.comp.progress_bar',
        'PIL.PngImagePlugin',
        'ui.assets',
    ],
    loglevel_warning: [
        # Set to INFO or loggier to go back to logging Google API request URLs
        # TODO: how the hell do I log this to separate log file only??
        'googleapiclient.discovery'
    ]
}

tree_action: {
    custom: {
        reload_handlers_before_each_invoke: true
    }
}

cache: {
    cache_dir_path: '$PROJECT_DIR/data/index',
    enable_md5_lookup: false,
    enable_sha256_lookup: false,
    # If true, load ALL the caches from disk at backend startup. If false, only loads caches as needed.
    load_all_caches_on_startup: false,
    # If true, load the caches from disk at program start for the displayed trees. Is implicitly true if load_all_caches_on_startup is true.
    load_caches_for_displayed_trees_on_startup: true,
    # If true, load the cache (if any) associated with the root of any tree as soon as it is displayed. If false, a Refresh button
    # will appear which must be pressed to load the tree
    load_cache_when_tree_root_selected: true,

    local_disk: {
        # If true, after loading a cache for a given local disk tree, re-scan the entire tree and add/remove/modify cached nodes if any changes
        # have occurred. Signatures/content are only recalculated for a given file if its timestamp or size has changed.
        # If false, just assume the cach is up-to-date (about 10x faster). Should only be set to false during testing.
        sync_from_local_disk_on_cache_load: true,

        signatures: {
            # If true, calculate MD5/SHA256 for each local file on the SigCalcBatchingThread. If false, calculate immediate when syncing from disk.
            lazy_load: true,

            # The time SigCalcBatchingThread sleeps between batches. Higher values will hog the CPU less; 0 will not pause until complete.
            batch_interval_ms: 1000,

            bytes_per_batch_high_watermark: 50000000
        }
    }
    # If true, grab the latest GDrive changes whenever the GDrive cache is loaded.
    # NOTE: if sync_from_gdrive_on_cache_load==false AND (live_monitoring_enabled==false OR enable_gdrive_polling_thread==False), then GDrive will
    # never be synced with new changes! Should only be set to false during testing.
    sync_from_gdrive_on_cache_load: true,

    monitoring: {
        # If true, enable capture of change events for file systems (local, GDrive...) for displayed trees in real-time,
        # updating cache and display as needed.
        live_monitoring_enabled: true,

        # If true (and live_monitoring_enabled is true) and GDrive tree(s) are being displayed, allow a dedicated thread to periodically poll
        # for GDrive changes, to keep the displayed trees live and up-to-date (also see: gdrive_thread_polling_interval_sec)
        enable_gdrive_polling_thread: false,
        gdrive_thread_polling_interval_sec: 10,

        local_change_batch_interval_ms: 1000
    }

    # If true, read and write the last allocated UID value to 'ui_state.global.last_uid' so that duplicate UIDs aren't assigned
    # across startups
    enable_uid_lastval_persistence: true,

    # The number of sequential UIDs to reserve each time we persist to disk. Setting to a higher number will mean less disk access, but
    # the UID numbers will get larger faster if there are a lot of program restarts, which is somewhere between annoying and inconvenient
    # when debugging
    uid_reservation_block_size: 1000
}

user_ops: {
    # If true, at startup, remove all planning nodes and archive any pending changes so that no changes are queued
    cancel_all_pending_ops_on_startup: false,

    # If true, CP and MV ops will c metadata (e.g. modify times) in addtion to content
    update_meta_for_dst_nodes: true
}

# Linux only:
thin_client: {
    # If true, will check if the backend server is running, and if not, will launch it
    launch_server_on_start: true,
    # If backend server is already running, kill and then restart it. This option is ignored if launch_server_on_start==false
    kill_existing_server_on_start: false,
    connection_timeout_sec: 10
    # Mostly useful for testing:
    kill_server_on_client_shutdown: true,

    # If zeroconf is used, wait up to this long for service discovery; if timeout is reached, fail
    zeroconf_discovery_timeout_sec: 5
}

agent: {
    local_disk: {
        download_dir: '$PROJECT_DIR/data/downloads',
        staging_dir: {
            location: '$PROJECT_DIR/data/temp',
            clear_on_startup: true,
        }
        device_id_file_path: '$PROJECT_DIR/config/device_uuid.txt',
    }
    grpc: {
        # If true, connect to agent address below. If false, use zeroconf to discover the server on the local network.
        use_fixed_address: false,
        fixed_address: '127.0.0.1',
        fixed_port: '50051'
    }
}

gdrive: {
    # How many results ask Google to return with a single request. Allowed values are between 1 and 1000.
    page_size: 1000,
    auth: {
        credentials_file_path: '$PROJECT_DIR/config/credentials.json',
        token_file_path: '$PROJECT_DIR/config/token.pickle'
    }
}

display: {
    progress_bar: {
        max_refresh_interval_sec: '0.001'
    }
    image: {
        tree_icon_size: 24,
        toolbar_icon_size: 24,
        badge_size: 16,
        use_native_toolbar_icons: false,
        use_native_tree_icons: true
    }
    treeview: {
        datetime_format: '%Y-%m-%d %H:%M:%S',
        use_dir_tree: true
        show_modify_ts_col: false
        show_change_ts_col: false
        show_etc_col: true
        row_height: 30,
        extra_indent: 0,
        use_empty_nodes: false,
        highlight_dropped_nodes_after_drag: true
    }
}

read_only_config: False
ui_state_filename: 'ui-state.json'
ui_state: @${ui_state_filename}
