logging: {
    debug_log: {
        enable: true
        full_path: '$PROJECT_DIR/debug.log'
        # filemode='w' == wipe out the prev log on each run
        mode: 'w'
        # NOTE: load the following regex into PyCharm:
        # ^([\d-]+ [\d-:,.]+)\s+([\w.]+)\s*([\w]+)\s*(.*)$
        # Capture groups: datetime=1 severity=3 category=2
        format: '%(asctime)s %(name)25s %(levelname)-8s %(message)s',
        datetime_format: '%Y-%m-%d %H:%M:%S.%03d'
    },
    console: {
        enable: true
        format: '%(asctime)s %(name)25s %(levelname)-8s %(message)s',
        datetime_format: '%H:%M:%S.%03d'
    },
    loglevel_info: [
        'app_config',
    #    'util.file_util',
   #     'index.sqlite.base_db',
     #   'index.sqlite.gdrive_db',
      #  'diff.diff_content_first',
        'ui.comp.progress_bar',
      #  'ui.tree.display_store',
      #  'ui.tree.ui_listeners',
       # 'ui.tree.display_mutator',
    ],
    loglevel_warning: [
        # Set to INFO or loggier to go back to logging Google API request URLs
        # TODO: how the hell do I log this to separate log file only??
        'googleapiclient.discovery'
    ]
}

auth: {
    credentials_file_path: 'credentials.json',
    token_file_path: 'token.pickle'
}

cache: {
    cache_dir_path: 'cache',
    enable_md5_lookup: false,
    enable_sha256_lookup: false,
    # If true, never load caches from disk. Does not affect saving to cache
    enable_cache_load: true,
    # If true, never save caches to disk. Does not affect loading from cache
    enable_cache_save: true
    # If true, load all the caches from disk at program start. If false, wait until each is requested.
    load_all_caches_on_startup: false
    # If true, load the caches from disk at program start for the displayed trees. Is implicitly true if load_all_caches_on_startup is true.
    load_caches_for_displayed_trees_on_startup: true
    # If true, load the cache (if any) associated with the root of any tree as soon as it is displayed. If false, a Refresh button
    # will appear which must be pressed to load the tree
    load_cache_when_tree_root_selected: true
    sync_from_local_disk_on_cache_load: true

    # If true, at startup, remove all planning nodes and archive any pending changes so that no changes are queued
    cancel_all_pending_changes_on_startup: true

    # If true, read and write the last allocated UID value to 'transient.global.last_uid' so that duplicate UIDs aren't assigned
    # across startups
    enable_uid_lastval_persistence: true,

    # The number of sequential UIDs to reserve each time we persist to disk. Setting to a higher number will mean less disk access, but
    # the UID numbers will get larger faster if there are a lot of program restarts, which is somewhere between annoying and inconvenient
    # when debugging
    uid_reservation_block_size: 1000
}

executor: {
    # This should always be true, except if testing
    enable_op_execution_thread: true
}

read_only_config: False
transient_filename: 'transient-config.json'
transient: @${transient_filename}

download_dir: 'cache/downloads'
staging_dir: 'cache/temp'

display: {
    max_refresh_interval_sec: '0.001'
    diff_tree: {
        datetime_format: '%Y-%m-%d %H:%M:%S',
        use_dir_tree: true
        show_modify_ts_col: false
        show_change_ts_col: false
        show_etc_col: true
        row_height: 30,
        icon_size: 24,
        extra_indent: 0,
        use_empty_nodes: false
    }
}

gdrive: {
    # How many results ask Google to return with a single request. Allowed values are between 1 and 1000.
    page_size: 1000
}
