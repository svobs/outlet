syntax = "proto3";

import public "outlet/backend/agent/grpc/generated/Node.proto"; // PYTHON
//import public "Node.proto"; // Swift

option java_package = "com.msvoboda.outlet";
option go_package = "msvoboda.com/outlet/proto";
option java_multiple_files = true;

package outlet.backend.agent.grpc.generated;

message Empty {
	// nothing
}

message ConfigEntry {
	string key = 1;
	string val = 2;
}

message GetConfig_Request {
	repeated string config_key_list = 1;
}

message GetConfig_Response {
	repeated ConfigEntry config_list = 1;
}

message PutConfig_Request {
	repeated ConfigEntry config_list = 1;
}

message PutConfig_Response {
	// nothing
}

message GetIcon_Request {
	uint32 icon_id = 1;
}

message GetIcon_Response {
	Icon icon = 1;
}

message Icon {
	uint32 icon_id = 1;
	bytes content = 2;
}

message GetDeviceList_Request {
	// nothing
}

message GetDeviceList_Response {
	repeated Device device_list = 1;
}

message Device {
	uint32 device_uid = 1;
	string long_device_id = 2;
	uint32 tree_type = 3;
	string friendly_name = 4;
}

message GetFilter_Request {
	string tree_id = 1;
}

message GetFilter_Response {
	FilterCriteria filter_criteria = 1;
}

message UpdateFilter_Request {
	string tree_id = 1;
	FilterCriteria filter_criteria = 2;
}

message UpdateFilter_Response {
	// nothing
}

message SetSelectedRowSet_Request {
	repeated string selected_row_guid_set = 1;
	string tree_id = 2;
}

message SetSelectedRowSet_Response {
	// nothing
}

message RemoveExpandedRow_Request {
	string row_guid = 1;
	string tree_id = 2;
}

message RemoveExpandedRow_Response {
	// nothing
}

message GetRowsOfInterest_Request {
	string tree_id = 1;
}

message GetRowsOfInterest_Response {
	repeated string expanded_row_guid_set = 1;
	repeated string selected_row_guid_set = 2;
}

message GetLastPendingOp_Request {
	uint32 node_uid = 1;
}

message DownloadFromGDrive_Request {
	uint32 node_uid = 1;
	string requestor_id = 2;
}

message GetLastPendingOp_Response {
	UserOp user_op = 1;
}

message Subscribe_Request {
	// nothing
}

message GetOpExecPlayState_Request {
	// nothing
}

message ToggleUiEnablement {
	bool enable = 1;
}

message GenerateMergeTree_Request {
	string tree_id_left = 1;
	string tree_id_right = 2;
	repeated string change_list_left = 3;
	repeated string change_list_right = 4;
}

message DragDrop_Request {
	string src_tree_id = 1;
	string dst_tree_id = 2;
	repeated SPIDNodePair src_sn_list = 3;
	SPIDNodePair dst_sn = 4;
	bool is_into = 5;
}

message RefreshSubtree_Request {
	NodeIdentifier node_identifier = 1;
	string tree_id = 2;
}

message RefreshSubtreeStats_Request {
	uint32 root_uid = 1;
	string tree_id = 2;
}

message DeleteSubtree_Request {
	repeated uint32 node_uid_list = 1;
}

message ErrorOccurred {
	string msg = 1;
	string secondary_msg = 2;
}

message UidContainer {
	uint32 uid = 1;
}

message StartDiffTrees_Request {
	string tree_id_left = 1;
	string tree_id_right = 2;
}

message StartDiffTrees_Response {
	string tree_id_left = 1;
	string tree_id_right = 2;
}

message DragDrop_Response {
	// nothing
}

message DirMetaUpdate {
	oneof key {
		string guid = 1;
		uint32 uid = 2;
	}
	DirMeta dir_meta = 3;
}

// StatsUpdate is sent:
// 1. Some period of time after node added / modified / removed from tree (not after *every* update)
// 2. If the FE requests it (DEPRECATED behavior)
message StatsUpdate {
	repeated DirMetaUpdate dir_meta_list = 1;
	string status_msg = 2;
}

message SignalMsg {
	uint32 sig_int = 1;
	string sender = 2;

	string parent_guid = 3; // for NODE_UPSERTED, NODE_REMOVED

	oneof signal_data {
		Empty empty = 10;
		ErrorOccurred error_occurred = 11;
		DisplayTreeUiState display_tree_ui_state = 12;
		PlayState play_state = 13;
		ToggleUiEnablement ui_enablement = 14;
		SPIDNodePair sn = 15;  // for NODE_UPSERTED, NODE_REMOVED
		StatusMsg status_msg = 17;
		DownloadMsg download_msg = 18;
		StatsUpdate stats_update = 19;
		Device device = 20;
		DualDisplayTree dual_display_tree = 21;
	}
}

message DualDisplayTree {
	DisplayTreeUiState left_tree = 1;
	DisplayTreeUiState right_tree = 2;
}

message DownloadMsg {
	string filename = 1;
}

message StatusMsg {
	string msg = 1;
}

message SendSignalResponse {
	// nothing
}

message GetChildList_Request {
	NodeIdentifier parent_spid = 1;
	string tree_id = 2;
	uint32 max_results = 3; // 0=unlimited
}

message GetChildList_Response {
	repeated SPIDNodePair child_list = 1;
	uint32 result_exceeded_count = 2; // if max_results exceeded, node_list is empty and this indicates result count
}

message GetAncestorList_Request {
	NodeIdentifier spid = 1;
	string stop_at_path = 2;
}

message GetAncestorList_Response {
	repeated SPIDNodePair ancestor_list = 1;
}

message PlayState {
	bool is_enabled = 1;
}

message StartSubtreeLoad_Request {
	string tree_id = 1;
}

message StartSubtreeLoad_Response {
	// nothing
}

message DisplayTreeUiState {
	string tree_id = 1;
	SPIDNodePair root_sn = 2;
	bool root_exists = 3;
	string offending_path = 4;
	bool needs_manual_load = 5;
	uint32 tree_display_mode = 6;
	bool has_checkboxes = 7;
}

message RequestDisplayTree_Request {
	bool is_startup = 1;
	string tree_id = 2;
	bool return_async = 3;
	string user_path = 4;
	uint32 device_uid = 5;
	NodeIdentifier spid = 6;
	uint32 tree_display_mode = 7;
}

message RequestDisplayTree_Response {
		DisplayTreeUiState display_tree_ui_state = 1;
}

message SingleNode_Response {
	Node node = 1;
}

message GetUidForLocalPath_Request {
	string full_path = 1;
	uint32 uid_suggestion = 2;
}

message GetUidForLocalPath_Response {
	uint32 uid = 1;
}

message GetSnFor_Request {
	uint32 node_uid = 1;
	uint32 device_uid = 2;
	string full_path = 3;
}

message GetSnFor_Response {
	SPIDNodePair sn = 1;
}

message GetNodeForUid_Request {
	uint32 uid = 1;
	uint32 device_uid = 2; // optional (but encouraged!)
}

message GetNextUid_Request {
	// nothing
}

message GetNextUid_Response {
	uint32 uid = 1;
}

service Outlet {
	// Signal
	rpc subscribe_to_signals(Subscribe_Request) returns (stream SignalMsg);
	rpc send_signal(SignalMsg) returns (SendSignalResponse);

	// Config
	rpc get_config(GetConfig_Request) returns (GetConfig_Response);
	rpc put_config(PutConfig_Request) returns (PutConfig_Response);

	rpc get_icon(GetIcon_Request) returns (GetIcon_Response);

	rpc get_device_list(GetDeviceList_Request) returns (GetDeviceList_Response);

	// TreeView
	rpc get_child_list_for_spid(GetChildList_Request) returns (GetChildList_Response);
	rpc get_ancestor_list_for_spid(GetAncestorList_Request) returns (GetAncestorList_Response);
	rpc get_rows_of_interest(GetRowsOfInterest_Request) returns (GetRowsOfInterest_Response);
	rpc set_selected_row_set(SetSelectedRowSet_Request) returns (SetSelectedRowSet_Response);
	rpc remove_expanded_row(RemoveExpandedRow_Request) returns (RemoveExpandedRow_Response);
	rpc get_filter(GetFilter_Request) returns (GetFilter_Response);
	rpc update_filter(UpdateFilter_Request) returns (UpdateFilter_Response);

	rpc request_display_tree(RequestDisplayTree_Request) returns (RequestDisplayTree_Response);
	rpc start_subtree_load(StartSubtreeLoad_Request) returns (StartSubtreeLoad_Response);
	rpc refresh_subtree(RefreshSubtree_Request) returns (Empty);
	rpc refresh_subtree_stats(RefreshSubtreeStats_Request) returns (Empty);

	rpc get_next_uid(GetNextUid_Request) returns (GetNextUid_Response);
	rpc get_node_for_uid(GetNodeForUid_Request) returns (SingleNode_Response);
	rpc get_uid_for_local_path(GetUidForLocalPath_Request) returns (GetUidForLocalPath_Response);
	rpc get_sn_for(GetSnFor_Request) returns (GetSnFor_Response);

	rpc start_diff_trees(StartDiffTrees_Request) returns (StartDiffTrees_Response);
	rpc generate_merge_tree(GenerateMergeTree_Request) returns (Empty);
	rpc drop_dragged_nodes(DragDrop_Request) returns (DragDrop_Response);
	rpc delete_subtree(DeleteSubtree_Request) returns (Empty);
	rpc get_last_pending_op_for_node(GetLastPendingOp_Request) returns (GetLastPendingOp_Response);
	rpc download_file_from_gdrive(DownloadFromGDrive_Request) returns (Empty);
	rpc get_op_exec_play_state(GetOpExecPlayState_Request) returns (PlayState);
}
