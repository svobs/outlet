syntax = "proto3";

import public "outlet/daemon/grpc/Node.proto";

option java_package = "com.msvoboda.outlet";
option go_package = "msvoboda.com/outlet/proto";
option java_multiple_files = true;

package outlet.daemon.grpc;

message PingRequest {
	// nothing
}

message PingResponse {
	int64 timestamp = 1;
}

message SubscribeRequest {
	repeated string subscriber_id_list = 1;
}

message Signal {
	string signal_name = 1;
	string sender_name = 2;

	oneof signal_data {
		DisplayTreeUiState display_tree_ui_state = 10;
	}
}

message DisplayTreeUiState {
	string tree_id = 1;
	SPIDNodePair root_sn = 2;
	bool root_exists = 3;
	string offending_path = 4;
	bool needs_manual_load = 5;
}

message SingleNode_Response {
	outlet.daemon.grpc.Node node = 1;
}

message GetUidForLocalPath_Request {
	string full_path = 1;
	int32 uid_suggestion = 2;
}

message GetUidForLocalPath_Response {
	int32 uid = 1;
}

message GetNodeForUid_Request {
	int32 uid = 1;
	int32 tree_type = 2; // optional
}

message GetNodeForLocalPath_Request {
	string full_path = 1;
}

message GetNextUid_Request {
	// nothing
}

message GetNextUid_Response {
	int32 uid = 1;
}

message LoadNewTree {

	// TODO: need to add ROOT_PATH_UPDATED listener to CacheMan / GRPC client (both backends)

	// send in reply:
	// needs_manual_load_on_startup
}

service Outlet {
	rpc subscribe_to_signals(SubscribeRequest) returns (stream Signal);
	rpc ping(PingRequest) returns (PingResponse) {}
	rpc get_node_for_uid(GetNodeForUid_Request) returns (SingleNode_Response) {}
	rpc get_node_for_local_path(GetNodeForLocalPath_Request) returns (SingleNode_Response) {}

	rpc get_next_uid(GetNextUid_Request) returns (GetNextUid_Response) {}
	rpc get_uid_for_local_path(GetUidForLocalPath_Request) returns (GetUidForLocalPath_Response) {}
}


